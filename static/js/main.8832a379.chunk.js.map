{"version":3,"sources":["components/Button.tsx","services/firebase.ts","contexts/AuthContext.tsx","hooks/useAuth.ts","images/illustration.svg","images/google-icon.svg","pages/Home.tsx","pages/NewRoom.tsx","images/like.svg","components/QuestionCard.tsx","images/copy.svg","components/RoomCode.tsx","pages/Room.tsx","App.tsx","index.tsx"],"names":["Button","props","className","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","AuthContext","createContext","AuthContextProvider","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","useAuth","useContext","Home","history","useHistory","roomId","setRoomId","push","event","preventDefault","trim","ref","get","exists","alert","src","illustrationImg","alt","onClick","googleLogo","onSubmit","onChange","target","type","placeholder","NewRoom","newRoom","setNewRoom","roomRef","title","authorId","firebaseRoom","key","to","QuestionCard","content","author","likeImg","RoomCode","navigator","clipboard","writeText","code","copyImg","Room","question","setQuestion","questionsList","setQuestionsList","roomTitle","setRoomTitle","useParams","e","newQuestion","isHighLighted","isAnswered","on","room","databaseRoom","val","firebaseQuestions","questions","questionsArray","Object","entries","map","length","disabled","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8832a379.chunk.js","sourcesContent":["import { ButtonHTMLAttributes } from 'react';\n\nimport '../styles/button.scss';\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>\n\nexport function Button(props:ButtonProps) {\n  return (\n    <button className=\"button\" {...props}/>\n  )\n}\n","import firebase from 'firebase/app';\n\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst database = firebase.database();\n\nexport { firebase, auth, database }\n","import { auth, firebase } from '../services/firebase';\nimport { createContext, useState, useEffect, ReactNode } from 'react';\n\ntype User = {\n  id: string;\n  name: string;\n  avatar: string;\n}\n\ntype AuthContextType = {\n  user: User | undefined;\n  signInWithGoogle: () => Promise<void>;\n};\n\ntype AuthContextProviderProps = {\n  children: ReactNode;\n};\n\nexport const AuthContext = createContext({} as AuthContextType);\n\nexport function AuthContextProvider(props: AuthContextProviderProps) {\n\n  const [user, setUser] = useState<User>();\n\n  // usando o array vazio a função dentro do useEffect vai ser disparada apenas uma vez quando o componente for montado\n  useEffect(() => {\n\n    //O metodo onAuthStateChanged retorna um firebase.Unsubscribe que é a função q retira o listener\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const { displayName, photoURL, uid } = user;\n  \n  \n        if (!displayName || !photoURL) {\n          throw new Error('Mising information from Google Account');\n        }\n  \n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL,\n        });\n      }\n    });\n\n    //retornar o metodo do firebase.unsubscribe para retirar o evento na hora da desmontagem\n    return () => {\n      unsubscribe();\n    }\n  }, []);\n  \n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n  \n    const result = await auth.signInWithPopup(provider)\n  \n    if (result.user) {\n      const { displayName, photoURL, uid } = result.user;\n  \n  \n      if (!displayName || !photoURL) {\n        throw new Error('Mising information from Google Account');\n      }\n  \n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL,\n      });\n    }\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, signInWithGoogle }}>\n      {props.children}\n    </AuthContext.Provider>\n  )\n}\n","import { useContext } from 'react';\nimport { AuthContext } from '../contexts/AuthContext';\n\nexport function useAuth() {\n  const value = useContext(AuthContext);\n  return value;\n}\n","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","import { FormEvent } from 'react';\nimport { Button } from '../components/Button';\nimport { useHistory } from 'react-router-dom'\nimport { useAuth } from '../hooks/useAuth';\nimport illustrationImg from '../images/illustration.svg';\nimport googleLogo from '../images/google-icon.svg'\nimport '../styles/auth.scss';\nimport { useState } from 'react';\nimport { database } from '../services/firebase';\n\n\nexport function Home() {\n  const history = useHistory();\n  const { user, signInWithGoogle } = useAuth();\n  const [roomId, setRoomId] = useState('');\n\n  async function handleCreateRoom() {\n    if (!user) {\n      await signInWithGoogle();\n    }\n    history.push('/rooms/new');\n  }\n\n  async function handleJoinRoom(event:FormEvent) {\n    event.preventDefault();\n\n    if(roomId.trim() === '') {\n      return;\n    }\n\n    const roomRef = await database.ref(`rooms/${roomId}`).get();\n\n    if (!roomRef.exists()) {\n      alert('This room does not exists');\n      return;\n    }\n\n    history.push(`/rooms/${roomId}`)\n\n  }\n\n  return (\n    <div id=\"auth-page\">\n      <aside>\n        <img src={illustrationImg} alt=\"Ilustração de perguntas e respostas\" />\n        <strong>Faça sua pergunta</strong>\n        <p>Tire suas dúvidas em tempo real</p>\n      </aside>\n      <main>\n        <div className=\"main-content\">\n          <button\n            className=\"btn-create-room\"\n            onClick={handleCreateRoom}\n          >\n            <img src={googleLogo} alt=\"Google Logo\" />\n            Entre com o google\n          </button>\n          <div className=\"separator\">Ou entre em uma sala</div>\n          <form onSubmit={handleJoinRoom}>\n            <input\n              onChange={({ target }) => setRoomId(target.value)}\n              value={roomId}\n              type=\"text\"\n              placeholder=\"Digite o código da sala\"\n            />\n            <Button type=\"submit\">\n              Entrar na sala!\n            </Button>\n          </form>\n        </div>\n      </main>\n    </div>\n  )\n}","import { FormEvent, useState } from 'react';\nimport { Button } from '../components/Button';\nimport { Link, useHistory } from 'react-router-dom'\nimport illustrationImg from '../images/illustration.svg';\nimport { database } from '../services/firebase';\nimport { useAuth } from '../hooks/useAuth';\n\nexport function NewRoom() {\n  const { user } = useAuth();\n  const history = useHistory();\n\n  const [newRoom, setNewRoom] = useState('');\n\n  async function handleCreateRoom(event: FormEvent) {\n    event.preventDefault();\n\n    if (newRoom.trim() === '') {\n      return;\n    }\n\n    const roomRef = database.ref('rooms');\n\n    const firebaseRoom = await roomRef.push({\n      title: newRoom,\n      authorId: user?.id,\n    });\n\n    history.push(`/rooms/${firebaseRoom.key}`);\n\n\n  }\n\n  return (\n    <div id=\"auth-page\">\n      <aside>\n        <img src={illustrationImg} alt=\"Ilustração de perguntas e respostas\" />\n        <strong>Faça sua pergunta</strong>\n        <p>Tire suas dúvidas em tempo real</p>\n      </aside>\n      <main>\n        <div className=\"main-content\">\n          <h2>Crie uma nova sala</h2>\n          <form onSubmit={handleCreateRoom}>\n            <input\n              onChange={({ target }) => setNewRoom(target.value)}\n              value={newRoom}\n              type=\"text\"\n              placeholder=\"Código da sala\"\n            />\n            <Button type=\"submit\">\n              Criar sala\n            </Button>\n          </form>\n          <p>Quer entrar em uma sala existente? <Link to=\"/\">Clique aqui</Link></p>\n        </div>\n      </main>\n    </div >\n  )\n}","export default __webpack_public_path__ + \"static/media/like.78334eb8.svg\";","import '../styles/questionCard.scss';\nimport likeImg from '../images/like.svg'\n\ntype Question = {\n  id: string,\n  author: {\n    name: string,\n    avatar: string,\n  },\n  content: string,\n  isHighLighted: boolean,\n  isAnswered: boolean,\n}\n\nexport function QuestionCard(props: Question) {\n  return (\n    <div className=\"question-card-container\">\n      <p>{props.content}</p>\n      <div className=\"user-info\">\n        <div className=\"left-content\">\n          <img src={props.author.avatar} alt={props.author.name} />\n          <span>{props.author.name}</span>\n        </div>\n        <div className=\"right-content\">\n          <span>1</span>\n          <img src={likeImg} alt=\"Like icon\" />\n        </div>\n      </div>\n    </div>\n  )\n}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import copyImg from '../images/copy.svg';\nimport '../styles/roomCode.scss';\n\ntype RoomCodeProps = {\n  code: string;\n}\n\nexport function RoomCode(props: RoomCodeProps) {\n\n  function copyRoomCodeToClipboard() {\n    navigator.clipboard.writeText(props.code)\n  }\n  return (\n    <button onClick={copyRoomCodeToClipboard} className=\"room-code\">\n      <div>\n        <img src={copyImg} alt=\"copy\" />\n      </div>\n      <span>{`Sala ${props.code}`}</span>\n    </button>\n  );\n}","import { useEffect } from \"react\";\nimport { FormEvent, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button } from \"../components/Button\";\nimport { QuestionCard } from '../components/QuestionCard';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from \"../hooks/useAuth\";\nimport { database } from \"../services/firebase\";\nimport '../styles/room.scss';\n\ntype RoomParams = {\n  id: string;\n}\n\ntype FirebaseQuestions = Record<string, {\n  author: {\n    name: string,\n    avatar: string,\n  },\n  content: string,\n  isHighLighted: boolean,\n  isAnswered: boolean,\n}>;\n\ntype Question = {\n  id: string,\n  author: {\n    name: string,\n    avatar: string,\n  },\n  content: string,\n  isHighLighted: boolean,\n  isAnswered: boolean,\n}\n\nexport function Room() {\n  const [question, setQuestion] = useState('');\n  const [questionsList, setQuestionsList] = useState<Question[]>([]);\n  const [roomTitle, setRoomTitle] = useState('');\n  const { user } = useAuth();\n  \n\n  const params = useParams<RoomParams>();\n  const roomId = params.id;\n\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n\n    roomRef.on('value', room => {\n      const databaseRoom = room.val();\n      const firebaseQuestions: FirebaseQuestions = databaseRoom.questions || {};\n      const questionsArray = Object.entries(firebaseQuestions).map(([key, value]) => {\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighLighted: value.isHighLighted,\n          isAnswered: value.isAnswered,\n        }\n      });\n      setQuestionsList(questionsArray);\n      setRoomTitle(databaseRoom.title);\n    })\n  }, [roomId]);\n\n  async function handleSendQuestion(e: FormEvent) {\n    e.preventDefault();\n\n    if (question.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in')\n    }\n\n    const newQuestion = {\n      content: question,\n      author: {\n        name: user.name,\n        avatar: user.avatar,\n      },\n      isHighLighted: false,\n      isAnswered: false,\n    }\n\n    await database.ref(`rooms/${roomId}/questions`).push(newQuestion);\n    setQuestion('');\n  }\n\n  return (\n    <div id=\"room-page\">\n      <header>\n        <p>LOGO</p>\n        <div>\n          <RoomCode code={roomId} />\n        </div>\n      </header>\n      <main className=\"content\">\n        <div className=\"room-title\">\n          <h1>{roomTitle}</h1>\n          {questionsList.length > 0 && <span>{`${questionsList.length} pergunta(s)`}</span>}\n        </div>\n        <form onSubmit={handleSendQuestion}>\n          <textarea\n            onChange={({ target }) => setQuestion(target.value)}\n            placeholder=\"Pergunte\"\n            value={question}\n          />\n          <div className=\"form-footer\">\n            { user ? (\n              <div className=\"user-info\">\n                <img src={user.avatar} alt={user.name} />\n                <span>{user.name}</span>\n              </div>\n            ) : (\n              <span>Para enviar sua pergunta,<button className=\"btn-login\" > faça seu login.</button></span>\n            ) }\n            <Button disabled={!user} type=\"submit\">Enviar sua pergunta</Button>\n          </div>\n        </form>\n        { questionsList.map((question) => (\n          <QuestionCard key={question.id} {...question} />\n        )) }\n      </main>\n    </div>\n  );\n}","import { Home } from './pages/Home';\nimport { NewRoom } from './pages/NewRoom';\nimport { Room } from './pages/Room';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport { AuthContextProvider } from './contexts/AuthContext';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <AuthContextProvider>\n          <Route exact path=\"/mepergunte\" component={Home} />\n          <Route exact path=\"/mepergunte/rooms/new\" component={NewRoom} />\n          <Route path=\"/mepergunte/rooms/:id\" component={Room} />\n        </AuthContextProvider>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './services/firebase';\n\nimport './styles/global.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}